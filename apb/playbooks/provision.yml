- name: rhpam-rhdm-workshopv1-apb playbook to provision the application
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    openshift_user:
    openshift_password:
    openshift_token:
    openshift_master_url:
    openshift_user_password:
    project_suffix: "-XX"
    github_account: RedHat-Middleware-Workshops
    github_ref: master
    #gogs_dev_user: developer
    #gogs_pwd: openshift
    #gogs_generate_user_format: user%02d
    #gogs_clone_addr_m1: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m1-labs.git"
    #gogs_clone_addr_m2: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m2-labs.git"
    #gogs_clone_addr_m3: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m3-labs.git"
    #gogs_clone_addr_m4: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m4-labs.git"
    #gogs_repo_name: "rhpam-rhdm-workshop-v1-labs"
    #gogs_user_count: 0
    #gogs_user_format: user%d
    #infrasvcs_adm_user: adminuser
    #infrasvcs_adm_pwd: adminpwd
    user_count: 5
    master_url: "kubernetes.default"
    modules: "{{ modules }}"

  roles:
  - role: ansible.kubernetes-modules
    install_python_requirements: no
  - role: ansibleplaybookbundle.asb-modules

  tasks:
  - name: login as super user with token
    shell: "oc login {{ master_url }} --token={{ openshift_token }} --insecure-skip-tls-verify=true"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

  - name: login as super user with pwd
    shell: "oc login {{ master_url }} -u {{ openshift_user }} -p {{ openshift_password }} --insecure-skip-tls-verify=true"
    when: >
      openshift_token is not defined or
      openshift_token is none or
      openshift_token|trim() == ""
    tags: always

  - name: extract app route suffix
    block:
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: present
          spec_to_kind: Service
          spec_to_name: dummy
          spec_port_target_port: 8080
        register: dummy_route
      - set_fact:
          apps_hostname_suffix: "{{ dummy_route.route.spec.host|regex_replace('^dummy-' + namespace + '\\.(.*)$', '\\1') }}"
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: absent
    tags: always

  - name: delete project quota
    shell: "oc delete limitrange --all -n {{ namespace }}"
    ignore_errors: true
    tags: always

  #- name: delete coolstore-monolith-binary-build template
  #  shell: "oc delete template coolstore-monolith-binary-build -n openshift"
  #  register: workshopper_project_result
  #  ignore_errors: true
  #  tags: always

  #- name: create a coolstore-monolith-binary-build template
  #  shell: "oc create -f https://raw.githubusercontent.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m1-labs/master/monolith/src/main/openshift/template-binary.json -n openshift"
  #  when:
  #    - openshift_token is defined
  #    - openshift_token is not none
  #    - openshift_token|trim() != ""
  #  tags: always

  - name: disable namespace ownership for router
    shell: "oc set env dc/router --overwrite ROUTER_DISABLE_NAMESPACE_OWNERSHIP_CHECK=true -n default"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

#  - import_role:
#      name: openshift_sonatype_nexus
#    vars:
#      project_name: "{{ namespace }}"
#      nexus_image_version: 3.12.1
#      nexus_max_memory: 6Gi
#    tags: nexus

 # deploy rhamt-rhsso
 #
# - import_role:
#      name: rhamt
#    vars:
#      OCP_PROJECT: "{{ namespace }}"
#      REQUESTED_CPU: "{{ requested_cpu }}"
#      REQUESTED_MEMORY: "{{ requested_memory }}"
#    tags: rhamt

 # deploy gogs
#  - import_role:
#      name: openshift_gogs
#    vars:
#      project_name: "{{ namespace }}"
#      gogs_route: "gogs-{{ namespace }}.{{ apps_hostname_suffix }}"
#      gogs_image_version: 0.11.34
#      gogs_admin_user: "{{ infrasvcs_adm_user }}"
#      gogs_admin_password: "{{ infrasvcs_adm_pwd }}"
#      gogs_user: "{{ gogs_dev_user }}"
#      gogs_password: "{{ gogs_pwd }}"
#    tags: gogs

#  - name: Create gogs users
#    uri:
#      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/admin/users
#      method: POST
#      body: "{'login_name': '{{ item }}', 'username': '{{ item }}', 'email': '{{ item }}@gogs.com', 'password': '{{ gogs_pwd }}'}"
#      body_format: json
#      user: "{{ infrasvcs_adm_user }}"
#      password: "{{ infrasvcs_adm_pwd }}"
#      status_code: 200,201
#      force_basic_auth: true
#    ignore_errors: true
#    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }} format="{{ gogs_user_format }}"
#    when: infrasvcs_gogs_user_count > 0

#  - name: migrate moduel 1 repos for all users
#    uri:
#      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
#      method: POST
#      body: "{'clone_addr': '{{ gogs_clone_addr_m1 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name }}' }"
#      body_format: json
#      username: "user{{ item }}"
#      url_username: "user{{ item }}"
#      password: "{{ gogs_pwd }}"
#      status_code: 200,201
#      force_basic_auth: true
#    ignore_errors: true
#    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
#    when: infrasvcs_gogs_user_count > 0 and modules is search("m1")

#  - name: migrate moduel 2 repos for all users
#    uri:
#      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
#      method: POST
#      body: "{'clone_addr': '{{ gogs_clone_addr_m2 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name }}' }"
#      body_format: json
#      username: "user{{ item }}"
#      url_username: "user{{ item }}"
#      password: "{{ gogs_pwd }}"
#      status_code: 200,201
#      force_basic_auth: true
#    ignore_errors: true
#    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
#    when: infrasvcs_gogs_user_count > 0 and modules is search("m2")

#  - name: migrate moduel 3 repos for all users
#    uri:
#      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
#      method: POST
#      body: "{'clone_addr': '{{ gogs_clone_addr_m3 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name }}' }"
#      body_format: json
#      username: "user{{ item }}"
#      url_username: "user{{ item }}"
#      password: "{{ gogs_pwd }}"
#      status_code: 200,201
#      force_basic_auth: true
#    ignore_errors: true
#    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
#    when: infrasvcs_gogs_user_count > 0 and modules is search("m3")

#  - name: migrate moduel 4 repos for all users
#    uri:
#      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
#      method: POST
#      body: "{'clone_addr': '{{ gogs_clone_addr_m4 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name }}' }"
#      body_format: json
#      username: "user{{ item }}"
#      url_username: "user{{ item }}"
#      password: "{{ gogs_pwd }}"
#      status_code: 200,201
#      force_basic_auth: true
#    ignore_errors: true
#    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
#    when: infrasvcs_gogs_user_count > 0 and modules is search("m4")

 # deploy guides-che
#  - import_role:
#      name: openshift_workshopper
#      allow_duplicates: true
#    vars:
#      workshopper_name: guides-m1
#      project_name: "{{ namespace }}"
#      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m1-guides/{{ github_ref }}"
#      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m1-guides/{{ github_ref }}/_cloud-native-workshop-module1.yml"
#      workshopper_env_vars:
#        PROJECT_SUFFIX: "{{ project_suffix }}"
#        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
#        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
#        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
#        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
#        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
#    when: modules is search("m1")
#    tags: guides


  # install openjdk imagestream
  - name: get openjdk image stream
    shell: "oc get is java -n openshift"
    register: java_imagestream_result
    ignore_errors: true
    tags: jdk

  - name: install java image stream
    shell: "oc apply -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/master/openjdk/openjdk18-image-stream.json"
    when: java_imagestream_result is failed
    tags: jdk

  # install RHPAM Image Streams
  - name: Check if PAM ImageStreams exists
    shell: oc get is/rhpam73-businesscentral-openshift -n openshift
    register: rhpam_is_exists_result
    ignore_errors: true
    tags: rhpam

  - name: Import the RHPAM ImageStreams into the cluster.
    shell: "oc create -f https://raw.githubusercontent.com/jboss-container-images/rhpam-7-openshift-image/7.3.0.GA/rhpam73-image-streams.yaml -n openshift"
    when: rhpam_is_exists_result is failed
    ignore_errors: true
    tags: rhpam

  - name: Check if RHPAM Authoring Template exists
    shell: oc get template/rhpam73-authoring -n openshift
    register: rhpam_template_authoring_exists_result
    ignore_errors: true
    tags: rhpam

  - name: Import the RHPAM Authoring Template into the cluster.
    shell: "oc create -f https://raw.githubusercontent.com/jboss-container-images/rhpam-7-openshift-image/7.3.0.GA/templates/rhpam73-authoring.yaml -n openshift"
    when: rhpam_template_authoring_exists_result is failed
    ignore_errors: true
    tags: rhpam

# Only checking one of the ImageStreams that's in the Entando ImageStream file.
  - name: Check if Entando CC Dispute ImageStreams exists
    shell: oc get is/fsi-cc-dispute-customer -n openshift
    register: cc_disute_is_exists_result
    ignore_errors: true
    tags: rhpam

  - name: Import Entando OpenShift ImageStreams Entando EAP 7.1
    shell: "oc create -f https://raw.githubusercontent.com/entando/entando-ops/credit-card-dispute/Openshift/image-streams/entando-fsi-ccd-demo.json -n openshift"
    when: cc_disute_is_exists_result is failed


  - name: Check if Entando CC Dispute ImageStreams exists
    shell: oc get template/entando-demo -n openshift
    register: entando_demo_template_exists_result
    ignore_errors: true
    tags: rhpam

  - name: Import Entando demo template
    shell: "oc create -f https://raw.githubusercontent.com/entando/entando-ops/credit-card-dispute/Openshift/templates/entando-demo.yml -n openshift"
    when: entando_demo_template_exists_result is failed

#- name: Create Secrets Business Central
#  shell: oc process -f {{pam_secrets_template_yml}} -p SECRET_NAME=businesscentral-app-secret | oc create -f - -n {{ocp_project}}

#- name: Create Secrets KIE-server
#  shell: oc process -f {{pam_secrets_template_yml}} -p SECRET_NAME=kieserver-app-secret | oc create -f - -n {{ocp_project}}

#- name: Create Service Account Business Central
#  shell: oc create serviceaccount businesscentral-service-account -n {{ocp_project}}

#- name: Create Service Account KIE Server
#  shell: oc create serviceaccount kieserver-service-account -n {{ocp_project}}

#- name: Link secrets and service account Business Central
#  shell: oc secrets link --for=mount businesscentral-service-account businesscentral-app-secret -n {{ocp_project}}

#- name: Link secrets and service account KIE-server
#  shell: oc secrets link --for=mount kieserver-service-account kieserver-app-secret -n {{ocp_project}}

#- name: Create ConfigMap Business Central
#  shell: oc create configmap rhpam-bc-setup-config-map --from-file=/tmp/{{guid}}/bc-clone-git-repository.sh,/tmp/{{guid}}/provision-properties-static.sh -n {{ocp_project}}

#- name: Create PAM7 Authoring environment 2
#  shell: |
#         oc new-app --template=rhpam73-authoring \
#           --name={{pam_app_name}} \
#           -p APPLICATION_NAME={{pam_app_name}} \
#           -p BUSINESS_CENTRAL_HTTPS_SECRET=businesscentral-app-secret \
#           -p KIE_SERVER_HTTPS_SECRET=kieserver-app-secret \
#           -p IMAGE_STREAM_NAMESPACE=openshift \
#           -p KIE_ADMIN_USER={{kie_server_username}} \
#           -p KIE_ADMIN_PWD={{kie_server_password}} \
#           -p KIE_SERVER_USER=kieUser \
#           -p KIE_SERVER_PWD="kieUser!23" \
#           -p BUSINESS_CENTRAL_VOLUME_CAPACITY="1Gi" \
#           -p BUSINESS_CENTRAL_MEMORY_LIMIT="2Gi" \
#           -p KIE_SERVER_MEMORY_LIMIT="2Gi" \
#           -p DB_VOLUME_CAPACITY="4Gi" \
#           -e JAVA_OPTS_APPEND="-Dorg.jbpm.document.storage=/opt/eap/standalone/data/documents"



# Create database for reporting module
#  - include_role:
#      name: rhpam_reporting_database
#    vars:
#      OCP_PROJECT: '{{namespace}}'

# Create user projects
#  - include_role:
#      name: rhpam_project
#    vars:
#      USER_NUMBER: '{{item}}'
#      OCP_PROJECT: 'rhpam-user{{item}}'
#    with_sequence: start=1 end={{user_count}}

#  - include_tasks: ./rhpam_project.yml
#    vars:
#      USER_NUMBER: '{{item}}'
#      OCP_PROJECT: 'rhpam-user{{item}}'
#    with_sequence: start=1 end={{user_count}}


#---------------------- Deploy RHPAM ----------------------

  - include_role:
      name: ansible_openshift_rhpam
    vars:
      OCP_PROJECT: "{{ namespace }}"
      RHPAM_VERSION_TAG: 7.5.x
      RHPAM_VERSION_ID: 75
      #RHPAM_VERSION_TAG: 7.3.1.GA
#    with_sequence: start=1 end={{user_count}}


#---------------------- Patch Deployment Configs to use DMN-PMML versions of BC and KIE-Server ----------------------

  - include_role:
      name: rhpam_openshift_dmn_pmml
    vars:
      OCP_PROJECT: "{{ namespace }}"


#---------------------- Configure KIE-Server Prometheus plugin ----------------------

  - name: "Configure KIE-Server Prometheus plugin environment variables."
    shell: "oc set env dc/rhpam7-kieserver JAVA_OPTS_APPEND=\"-Dorg.kie.prometheus.server.ext.disabled=false -Dorg.kie.prometheus.server.ext.metrics=org.kie.server.services.prometheus.PrometheusMetricsDMNListener\" -n {{ namespace }}"


#---------------------- Deploy Entando ----------------------

  - name: "Get KIE-Server Route"
    shell: "oc get route rhpam7-kieserver | awk 'FNR > 1 {print $2}'"
    register: oc_get_route_output

  - name: "Set KIE Server Route fact"
    set_fact:
      kie_server_route: "{{ oc_get_route_output.stdout }}"

  - name: "Get OCP Domain Suffix"
    shell: "oc get route rhpam7-kieserver | awk 'FNR > 1 {print $2}'| cut -d\".\" -f2-"
    register: oc_get_domain_suffix_output

  - name: "OCP Domain Suffix fact"
    set_fact:
      ocp_domain_suffix: "{{ oc_get_domain_suffix_output.stdout }}"

  - name: "Create Entando Customer Application"
    shell: |
           oc new-app --template=openshift/entando-demo \
             -p APPLICATION_NAME="entando-fsi-ccd-customer" \
             -p KIE_SERVER_BASE_URL="http://{{kie_server_route}}" \
             -p KIE_SERVER_USERNAME=pamAdmin \
             -p KIE_SERVER_PASSWORD=redhatpam1! \
             -p IMAGE_STREAM_NAMESPACE=openshift \
             -p IMAGE_STREAM="fsi-cc-dispute-customer" \
             -p ENTANDO_APP_BUILDER_HOSTNAME_HTTP="appbuilder-customer.{{ocp_domain_suffix}}" \
             -p ENTANDO_RUNTIME_HOSTNAME_HTTP="entando-core.{{ocp_domain_suffix}}" \
             -p ENTANDO_WEB_CONTEXT="fsi-credit-card-dispute-customer"

  - name: "Create Entando Admin Application"
    shell: |
           oc new-app --template=openshift/entando-demo \
             -p APPLICATION_NAME="entando-fsi-ccd-admin" \
             -p KIE_SERVER_BASE_URL="http://{{kie_server_route}}" \
             -p KIE_SERVER_USERNAME=pamAdmin \
             -p KIE_SERVER_PASSWORD=redhatpam1! \
             -p IMAGE_STREAM_NAMESPACE=openshift \
             -p IMAGE_STREAM="fsi-cc-dispute-admin" \
             -p ENTANDO_APP_BUILDER_HOSTNAME_HTTP="appbuilder-admin.{{ocp_domain_suffix}}" \
             -p ENTANDO_RUNTIME_HOSTNAME_HTTP="entando-core.{{ocp_domain_suffix}}" \
             -p ENTANDO_WEB_CONTEXT="fsi-credit-card-dispute-backoffice"


#---------------------- Deploy Prometheus ----------------------

  - include_role:
      name: prometheus
    vars:
      OCP_PROJECT: "{{ namespace }}"

#---------------------- Deploy Grafana ----------------------

  - include_role:
      name: grafana
    vars:
      OCP_PROJECT: "{{ namespace }}"


#    with_sequence: start=1 end={{user_count}}

#  - include_tasks: ./rhpam_decision-test-app.yml
#    vars:
#      OCP_PROJECT: 'rhpam-user{{item}}'
#    with_sequence: start=1 end={{user_count}}

#  - name: migrate moduel 2 repos for all users
#    uri:
#      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
#      method: POST
#      body: "{'clone_addr': '{{ gogs_clone_addr_m2 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name }}' }"
#      body_format: json
#      username: "user{{ item }}"
#      url_username: "user{{ item }}"
#      password: "{{ gogs_pwd }}"
#      status_code: 200,201
#      force_basic_auth: true
#    ignore_errors: true
#    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
#    when: infrasvcs_gogs_user_count > 0 and modules is search("m2")

#- import_role:
#    name: openshift_workshopper
#    allow_duplicates: true
#  vars:
#    workshopper_name: guides-m3
#    project_name: "{{ namespace }}"
#    workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/rhpam-rhdm-workshop-v1m3-guides/{{ github_ref }}"
#    workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/rhpam-rhdm-workshop-v1m3-guides/{{ github_ref }}/_rhpam-rhdm-workshop-module3.yml"
#    workshopper_env_vars:
#      PROJECT_SUFFIX: "{{ project_suffix }}"
#      #COOLSTORE_PROJECT: coolstore{{ project_suffix }}
#      OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
#      #ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
#      #GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
#      NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
#  when: modules is search("m3")
#  tags: guides

  # update jenkins templates
  #- import_role:
  #    name: openshift_jenkins
  #  vars:
  #    update_jenkins_templates: true
  #    jenkins_template_disable_admin_monitors: true
  #    deploy_jenkins: false
  #    jenkins_max_cpu: 2
  #    jenkins_max_mem: 2Gi

  # Post RH-SSO configuration
  #- name: Get access token to update RH-SSO theme
  #  uri:
  #    url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/realms/master/protocol/openid-connect/token
  #    method: POST
  #    body: "username=admin&password=password&grant_type=password&client_id=admin-cli"
  #    status_code: 200, 201
  #    force_basic_auth: true
  #    validate_certs: no
  #    return_content: yes
  #    headers:
  #      Content-Type: "application/x-www-form-urlencoded"
  #  register: result_token

#  - name: Update a master realm with RH-SSO theme
#    uri:
#      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/master/
#      method: PUT
#      body_format: json
#      body: '{ "displayName": "rh-sso", "displayNameHtml": "<strong>Red Hat</strong><sup>®</sup> Single Sign On", "loginTheme": "rh-sso", "adminTheme": "rh-sso", "accountTheme": "rh-sso", "emailTheme": "rh-sso", "accessTokenLifespan": 6000 }'
#      status_code: 204
#      force_basic_auth: true
#      validate_certs: no
#      headers:
#        Content-Type: "application/json"
#        Accept: "application/json"
#        Authorization: "Bearer {{ result_token.json.access_token }}"
#    when: result_token.json.access_token != ""

#  - name: Create RH-SSO users as many as gogs users
#    uri:
#      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/rhamt/users
#      method: POST
#      body_format: json
#      body: '{ "username": "user{{ item }}", "enabled": true, "disableableCredentialTypes": [ "password" ] }'
#      status_code: 200, 201, 409
#      force_basic_auth: true
#      validate_certs: no
#      headers:
#        Content-Type: "application/json"
#        Accept: "application/json"
#        Authorization: "Bearer {{ result_token.json.access_token }}"
#    ignore_errors: true
#    with_sequence: start=1 end={{ infrasvcs_gogs_user_count }}
#    when: result_token.json.access_token != "" and infrasvcs_gogs_user_count > 0

#  - name: Retrieve RH-SSO user's ID list
#    uri:
#      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/rhamt/users
#      method: GET
#      status_code: 200, 201, 409
#      force_basic_auth: true
#      validate_certs: no
#      return_content: yes
#      headers:
#        Accept: "application/json"
#        Authorization: "Bearer {{ result_token.json.access_token }}"
#    ignore_errors: true
#    when: result_token.json.access_token != ""
#    register: result_useridlist

#  - name: Get access token to reset passwords
#    uri:
#      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/realms/master/protocol/openid-connect/token
#      method: POST
#      body: "username=admin&password=password&grant_type=password&client_id=admin-cli"
#      status_code: 200, 201
#      force_basic_auth: true
#      validate_certs: no
#      return_content: yes
#      headers:
#        Content-Type: "application/x-www-form-urlencoded"
#    register: result_token

#  - name: Reset passwords for each RH-SSO user like userxx
#    uri:
#      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/rhamt/users/{{ item.id }}/reset-password
#      method: PUT
#      body_format: json
#      body: '{ "type": "password", "value": "{{ gogs_pwd }}", "temporary": true}'
#      status_code: 204
#      force_basic_auth: true
#      validate_certs: no
#      headers:
#        Content-Type: "application/json"
#        Accept: "application/json"
#        Authorization: "Bearer {{ result_token.json.access_token }}"
#    ignore_errors: true
#    with_items: "{{ result_useridlist.json }}"
#    when: item.username != "rhamt"

  # deploy eclipse che
#  - import_role:
#      name: openshift_eclipse_che
#    vars:
#      project_name: "{{ namespace }}"
#      che_version: "6.8.0"
#      multi_user: true
#      route_suffix: "{{ apps_hostname_suffix }}"
#      keycloak_admin_user: "{{ infrasvcs_adm_user }}"
#      keycloak_admin_pwd: "{{ infrasvcs_adm_pwd }}"
#      install_java_oc_stack: false
#      install_custom_stacks_json: |
#        [{
#          "name": "Java Cloud-Native",
#          "description": "Java JDK Stack on CentOS for Cloud-Native Workshop",
#          "scope": "general",
#          "workspaceConfig": {
#            "environments": {
#              "default": {
#                "recipe": {
#                  "type": "dockerimage",
#                  "content": "siamaksade/che-centos-jdk8"
#                },
#                "machines": {
#                  "dev-machine": {
#                    "env": {
#                      "MAVEN_OPTS" : "-Xmx512m",
#                      "MAVEN_MIRROR_URL": "http://nexus:8081/repository/maven-all-public"
#                    },
#                    "servers": {
#                      "8080/tcp": {
#                        "attributes": {},
#                        "protocol": "http",
#                        "port": "8080"
#                      },
#                      "8000/tcp": {
#                        "attributes": {},
#                        "protocol": "http",
#                        "port": "8000"
#                      },
#                      "9000/tcp": {
#                        "attributes": {},
#                        "protocol": "http",
#                        "port": "9000"
#                      },
#                      "9001/tcp": {
#                        "attributes": {},
#                        "protocol": "http",
#                        "port": "9001"
#                      }
#                    },
#                    "volumes": {},
#                    "installers": [
#                      "org.eclipse.che.exec",
#                      "org.eclipse.che.terminal",
#                      "org.eclipse.che.ws-agent"
#                    ],
#                    "attributes": {
#                      "memoryLimitBytes": "2147483648"
#                    }
#                  }
#                }
#              }
#            },
#            "commands": [
#              {
#                "commandLine": "mvn package -f ${current.project.path}",
#                "name": "build",
#                "type": "mvn",
#                "attributes": {
#                  "goal": "Build",
#                  "previewUrl": ""
#                }
#              },
#              {
#                "commandLine": "mvn clean package -f ${current.project.path}",
#                "name": "clean build",
#                "type": "mvn",
#                "attributes": {
#                  "goal": "Build",
#                  "previewUrl": ""
#                }
#              },
#              {
#                "commandLine": "mvn verify -f ${current.project.path}",
#                "name": "test",
#                "type": "mvn",
#                "attributes": {
#                  "goal": "Test",
#                  "previewUrl": ""
#                }
#              },
#              {
#                "commandLine": "mvn spring-boot:run -f ${current.project.path}",
#                "name": "run spring-boot",
#                "type": "mvn",
#                "attributes": {
#                  "goal": "Run",
#                  "previewUrl": "${server.9000/tcp}"
#                }
#              },
#              {
#                "commandLine": "cd ${current.project.path} && mvn fabric8:deploy",
#                "name": "fabric8:deploy",
#                "type": "mvn",
#                "attributes": {
#                  "goal": "Deploy",
#                  "previewUrl": ""
#                }
#              }
#            ],
#            "projects": [],
#            "defaultEnv": "default",
#            "name": "default",
#            "links": []
#          },
#          "components": [
#            {
#              "version": "---",
#              "name": "CentOS"
#            },
#            {
#              "version": "1.8.0_45",
#              "name": "JDK"
#            },
#            {
#              "version": "3.2.2",
#              "name": "Maven"
#            },
#            {
#              "version": "2.4",
#              "name": "Ansible"
#            },
#            {
#              "version": "3.11",
#              "name": "OpenShift CLI"
#            }
#          ],
#          "creator": "ide",
#          "tags": [
#            "Java",
#            "JDK",
#            "Maven",
#            "CentOS",
#            "Git"
#          ],
#          "id": "java-oc-centos-cloudnative"
#        }]
#    tags: eclipse-che
#
